pipeline {
    agent any
    options {
        // Prevents for checking out the code automatically
        skipDefaultCheckout()
    }
    stages {
        stage("Select Tag") {
            steps {
                script {
                    def params = input(id: "params",
                                        message: "Parameters for deploying ${env.APP}",
                                        parameters:
                                        [string(defaultValue: "dev", name: "Project", description: "Project where the image stream exists"),
                                        string(defaultValue: "", name: "Tag", description: "The tag to deploy")])
                        
                    env.PROJECT = params["Project"];
                    env.TAG = params["Tag"];
                    
                    openshift.withCluster {
                        openshift.withProject {
                            openshift.tag("${env.PROJECT}/${env.APP}:${env.TAG}", "${env.APP}:${env.TAG}");
                        }
                    }
                }
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster {
                        openshift.withProject {
                            // Creates the application if it does not exists and deploy it
                            if (!openshift.selector("dc", env.APP).exists()) {
                                dc = openshift.newApp("${env.APP}:${env.TAG}", "--name=${APP}").narrow("dc");
                                
                                openshift.selector("svc", env.APP).expose();
                                
                                while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                sleep 10
                                }
                                
                                openshift.set("triggers", "dc/${env.APP}", "--manual");
                            } else {
                                // Deploys the new version of the application
                                openshift.patch("dc/${env.APP}", "'{\"spec\":{\"triggers\":[{\"type\":\"ImageChange\",\"imageChangeParams\":{\"containerNames\":[\"${env.APP}\"],\"from\":{\"kind\":\"ImageStreamTag\",\"name\":\"${env.APP}:${env.TAG}\"}}}]}}}'")
                                openshift.selector("dc", env.APP).rollout().latest();
                            }
                        }
                    } 
                }
            }
        }
    }
}