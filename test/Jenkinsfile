pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        timeout(time: 20, unit: 'MINUTES')
    }
    stages {
        stage("Set Project") {
            when {
                not {
                    expression {
                        return env.PROJECT
                    }
                }
            }
            steps {
                script {
                     env.PROJECT = input(id: 'project',
                                         message: 'Select the project where the tag to deploy resides',
                                         parameters: [string(defaultValue: '', name: 'Project')]);
                }
            }
        }
        stage("Apply Changes") {
            steps {
                script {
                    openshift.withCluster {
                        openshift.withProject(env.PROJECT) {
                            def dc = openshift.selector("dc", [app: env.APP_NAME]).objects(exportable: true);
                            
                            try {
                                def cmList = openshift.selector("cm", [app: env.APP_NAME]).objects(exportable: true);
                                
                                openshift.withProject() {
                                    openshift.apply(cmList);             
                                }
                            } catch (e) {
                                echo "No ConfigMap to export"
                            }
                            
                            try {
                                def pvcList = openshift.selector("pvc", env.APP_NAME).objects(exportable: true);
                                
                                openshift.withProject() {
                                    openshift.apply(pvcList);             
                                }                            
                            } catch (e) {
                                echo "No PersistentVolumeClaim to export"
                            }

                            openshift.withProject() {
                                openshift.apply(dc);             
                            }           
                        }
                    }
                }
            }
        }
        stage("Select Tag") {
            when {
                not {
                    expression {
                        return env.TAG
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("${env.PROJECT}") {
                            def is = openshift.selector("is", "hello-service").object();
                            def tags = "";
                            
                            for (tag in is.spec.tags)
                                tags = tag.name + "\n" + tags; 
                            
                            env.TAG = input(message: "Select version",
                                            parameters: [choice(choices: tags, description: '', name: 'Versions')]);
                        }
                    }
                }
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.set("triggers", "dc/${env.APP_NAME}", "--from-image=${env.IMAGE_NAME}:${env.TAG}", "-c ${env.APP_NAME}");
                        } 
                    }
                }
            }
        }
        /*
        stage("Integration Test") {
            steps {
                script {

                }
            }
        }
        */
    }
}