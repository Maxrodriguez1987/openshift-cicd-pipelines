pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (!env.APPROVAL_GROUP)
                        env.APPROVAL_GROUP = "test-approvers"
                }
            }
        }
        // If project environment variable is not set, asks for it
        stage("Set Project") {
            when {
                not {
                    expression {
                        return env.PROJECT_NAME
                    }
                }
            }
            steps {
                script {
                     env.PROJECT_NAME = input(id: 'project',
                                         message: 'Select the project where the tag to deploy resides',
                                         parameters: [string(defaultValue: '', name: 'Project')]);
                }
            }
        }
        // If application environment variable is not set, asks for it
        stage("Set Application") {
            when {
                not {
                    expression {
                        return env.APP_NAME
                    }
                }
            }
            steps {
                script {
                     env.APP_NAME = input(id: 'application',
                                    message: 'Select the application to deploy',
                                    parameters: [string(defaultValue: '', name: 'Application')]);
                }
            }
        }
        stage("Promote Objects") {
            steps {
                script {
                    openshift.withCluster {
                        openshift.withProject() {
                            // Uses the template from development project to generate the application in test
                            objects = openshift.process("${env.APP_TEMPLATE}", "-p", "PARAM_APP_NAME=${env.APP_NAME}", "-n", "${env.PROJECT_NAME}");

                            for (o in objects) {
                                // Prevents to promote the BuildConfig and ImageSream, the build is only done in development stages
                                if (o.kind != "BuildConfig" && o.kind != "ImageStream") 
                                    openshift.apply(o);
                            }
                        }
                    }
                }
            }
        }
        stage("Select Tag") {
            when {
                not {
                    expression {
                        return env.TAG
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("${env.PROJECT_NAME}") {
                            // Generates a list of tags to deploy
                            def is = openshift.selector("is", env.APP_NAME).object();
                            def tags = "";
                            
                            for (tag in is.spec.tags)
                                tags = tag.name + "\n" + tags; 
                            
                            env.TAG = input(message: "Select version",
                                            parameters: [choice(choices: tags, description: '', name: 'Versions')]);
                        }
                    }
                }
            }
        }
        stage("Promote Tag") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Tags image from development to test, this operation creates the ImageStream
                            openshift.tag("${env.PROJECT_NAME}/${env.APP_NAME}:${env.TAG}", "${env.IMAGE_NAME}:${env.TAG}");
                        }
                    } 
                }
            }
        }
        stage("Approve Deploy") {
            steps {
                script {
                    def submitter = input message: 'Confirm deployment', submitterParameter: 'submitter';
                    def user = submitter.substring(0, submitter.lastIndexOf("-"));
                    def canApprove = false;

                    echo user;
                    echo env.APPROVAL_GROUP;
                    
                    openshift.withCluster() {
                        def groups = openshift.selector("groups").objects();

                        for (g in groups) {
                            if (g.name.equals(env.APPROVAL_GROUP) && g.users.contains(user)) {
                                echo "${user} can"
                                canApprove = true;
                                echo "User ${user} from group ${g.name} approved the deployment"
                            } 
                        }

                        if (canApprove == false)
                            error "User ${submitter} is not allowed to approve the deployment"
                    }
                }
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Adds a trigger for deploying the tag, this will cause an automatic rollout
                            openshift.set("triggers", "dc/${env.APP_NAME}", "--from-image=${env.IMAGE_NAME}:${env.TAG}", "-c ${env.APP_NAME}");
                        } 
                    }
                }
            }
        }
    }
}