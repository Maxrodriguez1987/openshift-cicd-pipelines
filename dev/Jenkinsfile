pipeline {
    agent {
        label env.JENKINS_SLAVE_IMAGE
    }
    environment { 
        TAG = "latest"
    }
    options {
        skipDefaultCheckout()
    }
    stages {
        stage("Set Repository") {
            when {
                expression {
                    return env.GIT_REPO
                }
            }
            steps {
                script {
                    env.GIT_REPO = input(id: 'repository',
                                               message: 'Select repository to deploy',
                                               parameters: [string(defaultValue: '', name: 'Repository')]);
                }
            }
        }
        stage("Set Branch") {
            when {
                not {
                    expression {
                        return env.GIT_BRANCH
                    }
                }         
            }
            steps {
                script {
                    env.GIT_BRANCH = input(id: 'branch',
                                               message: 'Select branch to deploy',
                                               parameters: [string(defaultValue: 'master', name: 'Branch')]);
                }
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    git branch: env.GIT_BRANCH, url: env.GIT_REPO
                }
            }
        }
        stage ("Set Up") {
            when {
                expression {
                    return env.APP_TEMPLATE
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.apply(openshift.process(readFile(file: env.APP_TEMPLATE), "-p", "PARAM_APP_NAME=${env.APP_NAME}"));
                        }
                    }
                }
            }
        }
        stage("Compile Code") {
            when {
                expression {
                    return !env.COMPILE_COMMAND.equals("none")
                }
            }
            steps {
                sh env.COMPILE_COMMAND
            }
        }
        stage("Test Code") {
            when {
                expression {
                    return !env.TEST_COMMAND.equals("none")
                }
            }
            steps {
                sh env.TEST_COMMAND
            }
        }
        stage("Analize Code") {
            when {
                expression {
                    return !env.CODE_ANALYSIS_COMMAND.equals("none")
                }
            }
            steps {
                sh env.CODE_ANALYSIS_COMMAND
            }
        }
        stage("Release Artifacts") {
            when {
                expression {
                    return !env.RELEASE_COMMAND.equals("none")
                }
            }
            steps {
                sh env.RELEASE_COMMAND
            }
        }
        stage("Build Image") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.selector("bc", env.APP_NAME).startBuild("--from-dir=${env.ARTIFACTS_DIR}", "--wait=true");
                        }
                    }
                }
            }
        }
        stage("Set Tag") {
            when {
                expression {
                    return !env.TAG
                }
            }
            steps {
                env.TAG = input(id: 'tag',
                                message: 'Value for the tag',
                                parameters: [string(defaultValue: '', name: 'Tag')]);
            }
        } 
        stage("Tag Image") {
            when {
                expression {
                    return env.TAG
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                            // Tags the image              
                            openshift.tag("${env.APP_NAME}:latest", "${env.APP_NAME}:${env.TAG}");
                        }
                    }
                } 
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            if (env.TAG)
                            // Deploys the new version of the application
                            openshift.set("triggers", "dc/${env.APP_NAME}", "--from-image=${env.APP_NAME}:${env.TAG}", "-c ${env.APP_NAME}");
                        } 
                    }
                }
            }
        }
    }
}