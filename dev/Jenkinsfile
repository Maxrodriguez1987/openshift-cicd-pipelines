pipeline {
    agent {
        // The Jenkins slave image to use (ie maven)
        label env.JENKINS_SLAVE_IMAGE
    }
    options {
        // Prevents for checking out the code automatically
        skipDefaultCheckout()
    }
    stages {
        stage("Checkout Code") {
            steps {
                script {
                    if (env.GIT_BRANCH.equals("none")) {
                        // If the branch is not specified an input is presented to complete it
                        env.GIT_BRANCH = input(id: 'branch',
                                               message: 'Select branch to deploy',
                                               parameters: [string(defaultValue: 'master', name: 'Branch')]);
                    }
                    
                    git branch: env.GIT_BRANCH, url: env.GIT_REPO
                }
            }
        }
        stage ("Set Up") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.apply(openshift.process(readFile(file: env.APP_TEMPLATE), "-p", "PARAM_APP_NAME=${APP}", "-p", "PARAM_IMAGE_NAME=${IMAGE}"));
                        }
                    }
                }
            }
        }
        stage("Compile Code") {
            steps {
                sh env.COMPILE_COMMAND
            }
        }
        stage("Test Code") {
            when {
                expression {
                    return !env.TEST_COMMAND.equals("none")
                }
            }
            steps {
                sh env.TEST_COMMAND
            }
        }
        stage("Analize Code") {
            when {
                expression {
                    return !env.CODE_ANALYSIS_COMMAND.equals("none")
                }
            }
            steps {
                sh env.CODE_ANALYSIS_COMMAND
            }
        }
        stage("Release Artifacts") {
            when {
                expression {
                    return !env.RELEASE_COMMAND.equals("none")
                }
            }
            steps {
                sh env.RELEASE_COMMAND
            }
        }
        stage("Build Image") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.selector("bc", env.APP).startBuild("--from-dir=${env.ARTIFACTS_DIR}", "--wait=true");
                        }
                    }
                }
            }
        }
        stage("Tag Image") {
            when {
                expression {
                    return env.TAG_IMAGE.equals("true")
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            env.TAG = input(id: 'tag',
                                            message: 'Value for the tag',
                                            parameters: [string(defaultValue: '', name: 'Tag')]);
                            
                            // Tags the image              
                            openshift.tag("${env.APP}:latest", "${env.IMAGE}:${env.TAG}");
                        }
                    }
                } 
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Deploys the new version of the application
                            openshift.set("triggers", "dc/${env.APP}", "--from-image=${env.IMAGE}:${env.TAG}", "-c ${env.APP}", "--auto=false");
                            openshift.selector("dc", env.APP).rollout().latest();
                        } 
                    }
                }
            }
        }
    }
}