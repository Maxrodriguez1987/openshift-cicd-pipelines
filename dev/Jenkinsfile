pipeline {
    agent {
        label env.JENKINS_SLAVE_IMAGE
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    stages {
        // If Git repository environment variable is not set, asks for it
        stage("Set Repository") {
            when {
                not {
                    expression {
                        return env.GIT_REPO
                    }
                }
            }
            steps {
                script {
                    env.GIT_REPO = input(id: 'repository',
                                         message: 'Select repository to deploy',
                                         parameters: [string(defaultValue: '', name: 'Repository')]);
                }
            }
        }
        // If Git branch environment variable is not set, asks for it
        stage("Set Branch") {
            when {
                not {
                    expression {
                        return env.GIT_BRANCH
                    }
                }         
            }
            steps {
                script {
                    env.GIT_BRANCH = input(id: 'branch',
                                           message: 'Select branch to deploy',
                                           parameters: [string(defaultValue: 'master', name: 'Branch')]);
                }
            }
        }
        // If Git credentials environment variable is not set, asks for it
        stage("Set Credentials") {
            when {
                not {
                    expression {
                        return env.GIT_SECRET
                    }
                }         
            }
            steps {
                script {
                    env.GIT_BRANCH = input(id: "secret",
                                           message: "Set credentiales to deploy",
                                           parameters: [string(defaultValue: "", name: "Branch", description: "Must be project/secret")]);
                }
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    if (env.GIT_SECRET && env.GIT_SECRET != "" && env.GIT_SECRET != "none") 
                        git branch: env.GIT_BRANCH, url: env.GIT_REPO, credentialsId: env.GIT_SECRET
                    else
                        git branch: env.GIT_BRANCH, url: env.GIT_REPO
                }
            }
        }
        stage("Initialize") {
            steps {
                script {
                    // If tag environment variable is not set, uses latest
                    if (!env.TAG)
                        env.TAG = "latest"
                    
                    // Unless set, automatically tags the image with environment variable tag (could be latest)
                    if (!env.MANUAL_TAG)
                        env.MANUAL_TAG = "false"

                    // If image name is not set, image name will be app name
                    if (!env.IMAGE_NAME) 
                        env.IMAGE_NAME = env.APP_NAME;    
                }
            }
        }
        stage ("Apply Template") {
            when {
                expression {
                    return env.APP_TEMPLATE
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Creates or replace (apply) into the development prjoect the application template for later use
                            openshift.apply("-f", env.APP_TEMPLATE);
                            // Uses the template to create the application
                            openshift.apply(openshift.process(readFile(file: env.APP_TEMPLATE), "-p", "PARAM_APP_NAME=${env.APP_NAME}"));
                        }
                    }
                }
            }
        }
        stage("Compile Code") {
            when {
                not {
                    expression {
                        return env.COMPILE_COMMAND.equals("none")
                    }
                }  
            }
            steps {
                sh env.COMPILE_COMMAND
            }
        }
        stage("Test Code") {
            when {
                not {
                    expression {
                        return env.TEST_COMMAND.equals("none")
                    }
                } 
            }
            steps {
                sh env.TEST_COMMAND
            }
        }
        stage("Analize Code") {
            when {
                not {
                    expression {
                        return env.CODE_ANALYSIS_COMMAND.equals("none")
                    }
                } 
            }
            steps {
                sh env.CODE_ANALYSIS_COMMAND
            }
        }
        stage("Release Artifacts") {
            when {
                not {
                    expression {
                        return env.RELEASE_COMMAND.equals("none")
                    }
                }        
            }
            steps {
                sh env.RELEASE_COMMAND
            }
        }
        stage("Build Image") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // If artifacts dir is set, binary s2i build is used
                            if (env.ARTIFACTS_DIR)
                                openshift.selector("bc", env.APP_NAME).startBuild("--from-dir=${env.ARTIFACTS_DIR}", "--wait=true");
                            else 
                                openshift.selector("bc", env.APP_NAME).startBuild("--wait=true");
                        }
                    }
                }
            }
        }
        // If manual tag is set, asks for the tag to use
        stage("Set Tag") {
            when {
                expression {
                    return env.MANUAL_TAG.equals("true")
                }
            }
            steps {
                script {
                    env.TAG = input(id: 'tag',
                                    message: 'Value for the tag',
                                    parameters: [string(defaultValue: '', name: 'Tag')]);
                }
                
            }
        } 
        stage("Tag Image") {
            when {
                not {
                    expression {
                        return env.TAG.equals("latest")
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.tag("${env.APP_NAME}:latest", "${env.IMAGE_NAME}:${env.TAG}");
                        }
                    }
                } 
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Adds a trigger for deploying the tag, this will cause an automatic rollout
                            openshift.set("triggers", "dc/${env.APP_NAME}", "--from-image=${env.IMAGE_NAME}:${env.TAG}", "-c ${env.APP_NAME}");
                        } 
                    }
                }
            }
        }
    }
}