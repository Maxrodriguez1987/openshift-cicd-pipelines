pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    environment {
        APP_CONFIG = "environments/test/config.yaml"
        APP_DEPLOYMENT_PATCH = "environments/test/deployment.yaml"
        PROJECT = getProject()
        CREDENTIALS = "${env.PROJECT}-${env.GIT_SECRET}"
    }
    stages {
        stage("Set Config Branch") {
            steps {
                script {
                    env.GIT_BRANCH = input(id: 'branch',
                                           message: 'Set branch',
                                           parameters: [string(defaultValue: '', name: 'branch')]);
                    
                    gitClone(repository: env.GIT_REPO, branch: env.GIT_BRANCH, credentialsId: env.CREDENTIALS)
                }
            }
        }
        stage ("Apply Configuration") {
            steps {
                applyConfiguration(project: env.PROJECT, application: env.APP_NAME, config: env.APP_CONFIG, deploymentPatch: env.APP_DEPLOYMENT_PATCH)
            }
        }   
        stage("Restart Application") {
            steps {
                restartApplication(project: env.PROJECT, application: env.APP_NAME)
            }
        }
    }
}