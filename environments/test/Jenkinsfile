pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    environment {
        APP_TEMPLATE = "openshift/template.yaml"
        APP_CONFIG = "config/environments/test/config.yaml"
        APP_DEPLOYMENT_PATCH = "config/environments/test/deployment.yaml"
        APP_CONFIG_DIR = "config"
        TAG = "latest"
        PROJECT = getProject()
        CREDENTIALS = "${env.PROJECT}-${env.GIT_SECRET}"
    }
    stages {
        stage("Select Tag") {
            when {
                not {
                    expression {
                        return env.TAG
                    }
                }
            }
            steps { 
                script {
                    env.TAG = selectTag(project: env.SRC_PROJECT, image: env.IMAGE_NAME)
                    env.GIT_BRANCH = env.TAG
                    gitClone(repository: env.GIT_REPO, branch: env.GIT_BRANCH, credentialsId: env.CREDENTIALS)
                }
            }
        }
        stage ("Apply Template") {
            steps {
                applyTemplate(template: env.APP_TEMPLATE, application: env.APP_NAME, image: env.IMAGE_NAME)
            }  
        }
        stage ("Apply Configuration") {
            when {
                expression {
                    return commons.hasTemplate(env.APP_TEMPLATE)
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            commons.gitCheckoutConfig(env.GIT_REPO, env.GIT_BRANCH, env.GIT_SECRET, env.APP_CONFIG_DIR)

                            commons.applyConfigChanges(APP_CONFIG, APP_DEPLOYMENT_PATCH)
                        }
                    }
                }
            }
        }
        stage("Promote Tag") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            // Tags image from development to test, this operation creates the ImageStream
                            openshift.tag("${env.SRC_PROJECT}/${env.IMAGE_NAME}:${env.TAG}", "${env.IMAGE_NAME}:${env.TAG}")
                        }
                    } 
                }
            }
        }
        stage("Approve Deploy") {
            when {
                expression {
                    return env.APPROVAL_GROUP
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        commons.resolveApproval(env.APPROVAL_GROUP)
                    }
                }
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            commons.deployApplication(env.APP_NAME, env.IMAGE_NAME, env.TAG)
                        } 
                    }
                }
            }
        }
    }
}