pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    environment {
        APP_TEMPLATE_FILE = "openshift/template.yaml"
        APP_CONFIG_FILE = "environments/test/config.yaml"
        APP_DEPLOYMENT_PATCH_FILE = "environments/test/deployment.yaml"
    }
    stages {
        stage("Initialize") {
            steps {
                library(identifier: 'openshift-pipeline-library@master', 
                        retriever: modernSCM([$class: 'GitSCMSource', 
                                             credentialsId: env.CREDENTIALS, 
                                             remote: env.PIPELINE_LIBRARY_REPOSITORY]))
                
                script {
                    env.PROJECT = getProject()
                }
            }
        }
        stage("Select Image") {
            steps { 
                script {
                    env.TAG = selectTag(project: env.SRC_PROJECT, image: env.IMAGE_NAME)
                }
            }
        }
        stage("Promote Image") {
            steps {
                tagImage(srcProject: env.SRC_PROJECT, srcImage: env.IMAGE_NAME, srcTag: env.TAG, dstProject: env.PROJECT, dstImage: env.IMAGE_NAME, dstTag: env.TAG)
            }
        }
        stage ("Apply Template") {
            steps {
                gitClone(repository: env.GIT_REPO, branch: env.TAG, credentialsId: env.CREDENTIALS)
                
                applyTemplate(project: env.PROJECT, 
                              template: env.APP_TEMPLATE_FILE, 
                              application: env.APP_NAME, 
                              image: env.IMAGE_NAME, 
                              createBuildObjects: false)
            }  
        }
        stage ("Apply Configuration") {
            steps {
                dir("config") {
                    gitClone(repository: env.GIT_REPO_CONFIG, branch: env.TAG, credentialsId: env.CREDENTIALS)

                    applyConfiguration(project: env.PROJECT, 
                                       application: env.APP_NAME, 
                                       config: env.APP_CONFIG_FILE, 
                                       deploymentPatch: env.APP_DEPLOYMENT_PATCH_FILE)
                }
            }
        }   
        stage("Approve Deploy") {
            when {
                expression {
                    return env.TEST_APPROVAL_GROUP
                }
            }
            steps {
                processApproval(env.TEST_APPROVAL_GROUP)
            }
        }
        stage("Deploy Image") {
            steps {
                deployImage(project: env.PROJECT, 
                            application: env.APP_NAME, 
                            image: env.IMAGE_NAME, 
                            tag: env.TAG)
            }
        }
    }
}