pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    environment {
        APP_TEMPLATE = "openshift/template.yaml"
        APP_CONFIG_DIR = "config"
        APP_CONFIG = "config/environments/test/config.yaml"
        APP_DEPLOYMENT_PATCH = "config/environments/test/deployment.yaml"
        PROJECT = getProject()
        CREDENTIALS = "${env.PROJECT}-${env.GIT_SECRET}"
    }
    stages {
        stage("Select Image") {
            steps { 
                script {
                    env.TAG = selectTag(project: env.SRC_PROJECT, image: env.IMAGE_NAME)
                    env.GIT_BRANCH = env.TAG
                    gitClone(repository: env.GIT_REPO, branch: env.GIT_BRANCH, credentialsId: env.CREDENTIALS)
                }
            }
        }
        stage("Promote Image") {
            steps {
                tagImage(srcProject: env.SRC_PROJECT, srcImage: env.IMAGE_NAME, srcTag: env.TAG, dstProject: env.PROJECT, dstImage: env.IMAGE_NAME, dstTag: env.TAG)
            }
        }
        stage ("Apply Template") {
            steps {
                applyTemplate(project: env.PROJECT, template: env.APP_TEMPLATE, application: env.APP_NAME, image: env.IMAGE_NAME, createBuildObjects: false)
            }  
        }
        stage ("Apply Configuration") {
            steps {
                applyConfiguration(project: env.PROJECT, application: env.APP_NAME, config: env.APP_CONFIG, deploymentPatch: env.APP_DEPLOYMENT_PATCH)
            }
        }   
        stage("Approve Deploy") {
            when {
                expression {
                    return env.TEST_APPROVAL_GROUP
                }
            }
            steps {
                processApproval(env.TEST_APPROVAL_GROUP)
            }
        }
        stage("Deploy Image") {
            steps {
                deployImage(project: env.PROJECT, application: env.APP_NAME, image: env.IMAGE_NAME, tag: env.TAG)
            }
        }
    }
}