@Library("pipeline-library") 
import com.redhat.openshift.pipelines.Commons

def commons = new Commons(this)

pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    environment {
        APP_TEMPLATE = "openshift/template.yaml"
        APP_CONFIG = "openshift/environments/test/config.yaml"
        APP_DEPLOYMENT_PATCH = "openshift/environments/test/deployment.yaml"
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (!env.IMAGE_NAME)
                        env.IMAGE_NAME = env.APP_NAME

                    // Gets the application project
                    env.PROJECT = commons.getApplicationProject()      
                }
            }
        }
        stage("Select Tag") {
            when {
                not {
                    expression {
                        return env.TAG
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.SRC_PROJECT) {
                            // Generates a list of tags to deploy
                            env.TAG = commons.getVersion(env.APP_NAME)
                            // Checkout same tag from Git
                            env.GIT_BRANCH = env.TAG
                        }
                    }
                }
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            commons.gitCheckout(env.GIT_REPO, env.GIT_BRANCH, env.GIT_SECRET)
                        }
                    }
                }
            }
        }
        stage ("Apply Template") {
            when {
                expression {
                    return commons.hasTemplate(env.APP_TEMPLATE)
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            // Uses the template to create the application
                            openshift.apply(commons.processTemplate("openshift/template.yaml", env.APP_NAME, env.IMAGE_NAME))
                        }
                    }
                }
            }
        }
        stage ("Apply Configuration") {
            when {
                expression {
                    return commons.hasConfig(env.APP_CONFIG) || commons.hasDeploymentPatch(env.APP_DEPLOYMENT_PATCH)  
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            commons.applyConfigChanges(APP_CONFIG, APP_DEPLOYMENT_PATCH)
                        }
                    }
                }
            }
        }
        stage("Promote Tag") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            // Tags image from development to test, this operation creates the ImageStream
                            openshift.tag("${env.SRC_PROJECT}/${env.IMAGE_NAME}:${env.TAG}", "${env.IMAGE_NAME}:${env.TAG}")
                        }
                    } 
                }
            }
        }
        stage("Approve Deploy") {
            when {
                expression {
                    return env.APPROVAL_GROUP
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        commons.resolveApproval(env.APPROVAL_GROUP)
                    }
                }
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            commons.deployApplication(env.APP_NAME, env.IMAGE_NAME, env.TAG)
                        } 
                    }
                }
            }
        }
    }
}