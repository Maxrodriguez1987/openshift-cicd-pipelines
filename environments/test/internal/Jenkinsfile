/*
 * Jenkinsfile
 *
 */

// Global variable to hold the commons library
def commons = null

pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (!env.IMAGE_NAME)
                        env.IMAGE_NAME = env.APP_NAME

                    sh "wget -O commons.groovy ${env.COMMONS_API_URL}"
                    sh "cat commons.groovy"
                    commons = load("commons.groovy")
                }
            }
        }
        stage("Select Tag") {
            when {
                not {
                    expression {
                        return env.TAG
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.SRC_PROJECT) {
                            // Generates a list of tags to deploy
                            env.TAG = commons.getVersion(env.APP)
                            env.GIT_BRANCH = env.TAG

                            echo env.TAG
                        }
                    }
                }
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    commons.gitCheckout(env.GIT_REPO, env.GIT_BRANCH, env.GIT_SECRET)
                }
            }
        }
        stage("Promote Template") {
            steps {
                script {
                    openshift.withCluster {
                        openshift.withProject() {
                            // Uses the template to create the application
                            objects = openshift.process(readFile(file: env.APP_TEMPLATE_FILE), "-p", "PARAM_APP=${env.APP}");

                            for (o in objects) {
                                // Prevents to promote the BuildConfig and ImageSream, the build is only done in development stages
                                if (o.kind != "BuildConfig" && o.kind != "ImageStream") 
                                    openshift.apply(o);
                            }
                        }
                    }
                }
            }
        }
        stage("Promote Tag") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Tags image from development to test, this operation creates the ImageStream
                            openshift.tag("${env.SRC_PROJECT}/${env.APP_NAME}:${env.TAG}", "${env.IMAGE_NAME}:${env.TAG}");
                        }
                    } 
                }
            }
        }
        stage("Approve Deploy") {
            steps {
                script {
                    openshift.withCluster() {
                        commons.resolveApproval(env.APPROVAL_GROUPS)
                    }
                }
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            commons.deployApplication(env.APP, env.IMAGE, env.TAG)
                        } 
                    }
                }
            }
        }
    }
}