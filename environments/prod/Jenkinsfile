@Library("pipeline-library") 
import com.redhat.openshift.pipelines.Commons

def commons = new Commons(this)

pipeline {
    agent {
        label "skopeo"
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (!env.IMAGE)
                        env.IMAGE = env.APP

                    // Gets the application project
                    env.PROJECT = commons.getApplicationProject()
                }
            }
        }
        stage("Select Tag") {
            when {
                not {
                    expression {
                        return env.TAG
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.SRC_PROJECT) {
                            // Generates a list of tags to deploy
                            env.TAG = commons.getVersion(env.APP)
                            env.GIT_BRANCH = env.TAG
                        }
                    }
                }
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROJECT) {
                            commons.gitCheckout(env.GIT_REPO, env.GIT_BRANCH, env.GIT_SECRET)
                        }
                    }
                }
            }
        }
        stage("Promote Objects") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Uses the template to create the application
                            objects = openshift.process(readFile(file: env.APP_TEMPLATE_FILE), "-p", "PARAM_APP=${env.APP}");

                            openshift.withCluster(env.DST_CLUSTER_URL, env.DST_CLUSTER_TOKEN) {
                                openshift.withProject(env.DST_PROJECT) {
                                    for (o in objects) {
                                        // Prevents to promote the BuildConfig and ImageSream, the build is only done in development stages
                                        if (o.kind != "BuildConfig" && o.kind != "ImageStream") 
                                            openshift.apply(o);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Set Promote Tag") {
            when {
                not {
                    expression {
                        return env.PROMOTE_TAG
                    }
                }
            }
            steps {
                script {
                    env.PROMOTE_TAG = input(id: 'promoteTag',
                                            message: 'Value for the tag to promote',
                                            parameters: [string(defaultValue: '', name: 'Tag')]);
                }
                
            }
        } 
        stage("Promote Tag") {
            steps {
                script {
                    // Credentials
                    def srcCreds = "unused:${env.SRC_REGISTRY_TOKEN}";
                    def dstCreds = "unused:${env.DST_REGISTRY_TOKEN}";

                    // Paths 
                    def src = "${env.SRC_REGISTRY_URL}/${env.SRC_PROJECT}/${env.APP}:${env.TAG}";
                    def dst = "${env.DST_REGISTRY_URL}/${env.DST_PROJECT}/${env.APP}:${env.PROMOTE_TAG}";

                    // Executes the Skopeo command
                    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=${srcCreds} --dest-creds=${dstCreds} ${src} ${dst}";
                }
            }
        }
        stage("Approve Deploy") {
            steps {
                script {
                    openshift.withCluster() {
                        commons.resolveApproval(env.APPROVAL_GROUP)
                    }
                }
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster(env.DST_CLUSTER_URL, env.DST_CLUSTER_TOKEN) {
                        openshift.withProject(env.DST_PROJECT) {
                            commons.deployApplication(env.APP, env.IMAGE, env.TAG)
                        } 
                    }
                }
            }
        }
    }
}