pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    environment {
        SRC_REGISTRY_URL="docker://docker-registry-default.192.168.64.60.nip.io"
        SRC_REGISTRY_TOKEN="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJjb3JlLXRlc3QiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiYnVpbGRlci10b2tlbi02cnQ3NSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJidWlsZGVyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMjBkOGYzZDAtYmY5Ny0xMWU4LWIxNjMtMWUzYzZmNDhjMTY3Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmNvcmUtdGVzdDpidWlsZGVyIn0.vweF55XOuWMeUkOiVogqZK6UMAUrO-OgFANgws8pJLR0w4WRbLG7t5T5qUSGCPt1yZAkUn3QFWyJ6LN-RrHOndMxgtX1_Eb6Q6l46yNitHjKBTktj-ipejwyJV0EyTlnN95T04brbT5PloZ9x3kjFntXX_zSKjQ8tBhqufOX7KyRJ_m30PnweYb9tSDQY_0I3ms6A5J7ApLUzrEBxc_kAhWoyVyr-Jc6FcGIQYpDcCPkMJUKE-P4RyHf94sqhnapDQyskuUYYxl2wp7Q1f6uR7cxDfKQqkTFiEsgEL_LApL7PYpy4gU8Lw4ftrS78ISlaogA5hFM2hRbTa2fFBQaXA"
        DST_REGISTRY_URL="docker://docker-registry-default.192.168.64.61.nip.io"
        DST_REGISTRY_TOKEN="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJjb3JlLXByb2QiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiYnVpbGRlci10b2tlbi12NzQ4ZyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJidWlsZGVyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYWZhZjhmMDgtYzAwNi0xMWU4LWFmOGQtN2U3OTdlYzlhMzFmIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmNvcmUtcHJvZDpidWlsZGVyIn0.GCLCzFaz9UYJ5v8OjCE3Lbr6Zvjpwxon9tIs-hjLAX79lnuxH_kpWHnyOhU09eixU1WERxmByr7qnLU6UCSIUFE7YSCMky9t4lTBw6shj6D01_0NF-kAlgvB3ac744-6avKTK1OLMSg2PIyRFFsEZmaAiTYAi491Yqsjci6WNk7D7lsJd9k1pNb7shyWJi5lEXYtoyfzyLmBXXmk7JLb-LTOgSH60qGGc3ly6hq51qydczfzyFgTrp0H4gin2D5tX_0lMELsxMCH0tVKlO2Xs8wH3v6U05HUNAczOMBiYQnfq5HY8lkcFKxj-pO-os5hSGHx-36jN5TDFmfguoSTIQ"
        DST_CLUSTER_URL="insecure://192.168.64.61:8443"
        DST_CLUSTER_TOKEN="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJwcm9kLW1hbmFnZW1lbnQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiYWRtaW4tdG9rZW4tdGN3azQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJmNzExMDk3Yy1jMDA2LTExZTgtYWY4ZC03ZTc5N2VjOWEzMWYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6cHJvZC1tYW5hZ2VtZW50OmFkbWluIn0.NaFh5hT6pZ3e5qwNT926UBMP0K8VIh_pcx-xdHtcB9kb9ji0X4QJLImSK2u5TJOok72-gvqaGt01HBgKAzDVEA68dII0ZmqwDSTo0TYPZw4DvXLzlpccwAdqklQI3PRzmNU_kq8skDzWYnZ-ccgzmCFIxUynOafaL47-um3-2eIjzwsxohd4YnRBjHXlpCe_vJ8fUyJL359BiOYiBwnWxIOuaY3lRxeoXco_ymB8I_tUByeuHG6dL3gL66Jedhq6q_pf7qd81WA8uPHOP4l9x5w7Ckx62tdKgCpigkMojavx2pQIF5rtpcDPGjwy_CtDLNtJR2T3xlyE6vAOm548nQ"
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (!env.IMAGE)
                        env.IMAGE = env.APP

                    sh "wget -O commons.groovy ${env.COMMONS_API_URL}"
                    commons = load("commons.groovy")

                    // Gets the application project
                    //env.DST_PROJECT = env.JOB_NAME.split("/")[0]    
                }
            }
        }
        stage("Select Tag") {
            when {
                not {
                    expression {
                        return env.TAG
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.SRC_PROJECT) {
                            // Generates a list of tags to deploy
                            env.TAG = commons.getVersion(env.APP)
                            env.GIT_BRANCH = env.TAG

                            echo env.TAG
                        }
                    }
                }
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    commons.gitCheckout(env.GIT_REPO, env.GIT_BRANCH, env.GIT_SECRET)
                }
            }
        }
        stage("Promote Objects") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Uses the template to create the application
                            objects = openshift.process(readFile(file: env.APP_TEMPLATE_FILE), "-p", "PARAM_APP=${env.APP}");

                            openshift.withCluster(env.DST_CLUSTER_URL, env.DST_CLUSTER_TOKEN) {
                                openshift.withProject(env.DST_PROJECT) {
                                    for (o in objects) {
                                        // Prevents to promote the BuildConfig and ImageSream, the build is only done in development stages
                                        if (o.kind != "BuildConfig" && o.kind != "ImageStream") 
                                            openshift.apply(o);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Set Promote Tag") {
            when {
                not {
                    expression {
                        return env.PROMOTE_TAG
                    }
                }
            }
            steps {
                script {
                    env.PROMOTE_TAG = input(id: 'promoteTag',
                                            message: 'Value for the tag to promote',
                                            parameters: [string(defaultValue: '', name: 'Tag')]);
                }
                
            }
        } 
        stage("Promote Tag") {
            agent {
                label "skopeo"
            }
            steps {
                script {
                    // Credentials
                    def srcCreds = "unused:${env.SRC_REGISTRY_TOKEN}";
                    def dstCreds = "unused:${env.DST_REGISTRY_TOKEN}";

                    // Paths 
                    def src = "${env.SRC_REGISTRY_URL}/${env.SRC_PROJECT}/${env.APP}:${env.TAG}";
                    def dst = "${env.DST_REGISTRY_URL}/${env.DST_PROJECT}/${env.APP}:${env.PROMOTE_TAG}";

                    // Executes skopeo command
                    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=${srcCreds} --dest-creds=${dstCreds} ${src} ${dst}";
                }
            }
        }
        stage("Approve Deploy") {
            steps {
                script {
                    openshift.withCluster() {
                        commons.resolveApproval(env.APPROVAL_GROUP)
                    }
                }
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster(env.DST_CLUSTER_URL, env.DST_CLUSTER_TOKEN) {
                        openshift.withProject(env.DST_PROJECT) {
                            commons.deployApplication(env.APP, env.IMAGE, env.TAG)
                        } 
                    }
                }
            }
        }
    }
}