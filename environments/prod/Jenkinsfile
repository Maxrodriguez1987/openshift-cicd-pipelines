pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    environment {
        APP_TEMPLATE = "openshift/template.yaml"
        APP_CONFIG_DIR = "config"
        APP_CONFIG = "config/environments/prod/config.yaml"
        APP_DEPLOYMENT_PATCH = "config/environments/prod/deployment.yaml"
        PROJECT = getProject()
        CREDENTIALS = "${env.PROJECT}-${env.GIT_SECRET}"
    }
    stages {
        stage("Select Image") {
            steps { 
                script {
                    env.TAG = selectTag(project: env.SRC_PROJECT, image: env.IMAGE_NAME)
                    env.GIT_BRANCH = env.TAG
                    gitClone(repository: env.GIT_REPO, branch: env.GIT_BRANCH, credentialsId: env.CREDENTIALS)
                }
            }
        }
        stage("Promote Image") {
            steps {
                withDockerRegistry([credentialsId: "${PROJECT}-src-registry-token", url: env.SRC_REGISTRY_URL]) {
                    withDockerRegistry([credentialsId: "${PROJECT}-dst-registry-token", url: env.DST_REGISTRY_URL]) {
                        openshift.withCluster {
                            openshift.raw("image mirror ${SRC_REGISTRY_URL}/${SRC_PROJECT}/${IMAGE_NAME}:${TAG}  ${DST_REGISTRY_URL}/${DST_PROJECT}/${IMAGE_NAME}:${TAG}")
                        }
                    }
                }   
            }
        }
        /*
        stage("Promote Image") {
            agent {
                label "skopeo"
            }
            steps {
                script {
                    // Credentials
                    def srcCreds = "unused:${env.SRC_REGISTRY_TOKEN}";
                    def dstCreds = "unused:${env.DST_REGISTRY_TOKEN}";

                    // Paths 
                    def src = "docker://${env.SRC_REGISTRY_URL}/${env.SRC_PROJECT}/${env.IMAGE_NAME}:${env.TAG}";
                    def dst = "docker://${env.DST_REGISTRY_URL}/${env.DST_PROJECT}/${env.IMAGE_NAME}:${env.TAG}";

                    // Executes the Skopeo command
                    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=${srcCreds} --dest-creds=${dstCreds} ${src} ${dst}";
                }
            }
        }
        */
        stage ("Apply Template") {
            steps {
                applyTemplate(clusterUrl: env.DST_CLUSTER_URL, 
                              clusterToken: env.DST_CLUSTER_TOKEN,
                              project: env.DST_PROJECT, 
                              template: env.APP_TEMPLATE, 
                              application: env.APP_NAME, 
                              image: env.IMAGE_NAME, 
                              createBuildObjects: false)
            }  
        }
        stage ("Apply Configuration") {
            steps {
                applyConfiguration(clusterUrl: env.DST_CLUSTER_URL, 
                                   clusterToken: env.DST_CLUSTER_TOKEN,
                                   project: env.DST_PROJECT, 
                                   application: env.APP_NAME, 
                                   config: env.APP_CONFIG, 
                                   deploymentPatch: env.APP_DEPLOYMENT_PATCH)
            }
        }   
        stage("Approve Deploy") {
            when {
                expression {
                    return env.PROD_APPROVAL_GROUP
                }
            }
            steps {
                processApproval(env.PROD_APPROVAL_GROUP)
            }
        }
        stage("Deploy Image") {
            steps {
                deployImage(clusterUrl: env.DST_CLUSTER_URL, 
                            clusterToken: env.DST_CLUSTER_TOKEN,
                            project: env.DST_PROJECT, 
                            application: env.APP_NAME, 
                            image: env.IMAGE_NAME, 
                            tag: env.TAG)
            }
        }
    }
}