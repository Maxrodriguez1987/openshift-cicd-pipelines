//echo env.COMMONS_API_URL

//def commons = load(fileLoader.fromGit("api/commons.groovy", env.COMMONS_API_URL))

pipeline {
    agent {
        label env.JENKINS_AGENT
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    // If tag environment variable is not set, uses latest
                    if (!env.TAG)
                        env.TAG = "latest"
                    
                    // Unless set, automatically tags the image with environment variable tag
                    if (!env.MANUAL_TAG)
                        env.MANUAL_TAG = "false"

                    // If image name is not set, image name will be app name
                    if (!env.IMAGE_NAME) 
                        env.IMAGE_NAME = env.APP_NAME;    
   
                }
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject {
                            gitCheckout(env.GIT_REPO, env.GIT_BRANCH, env.GIT_SECRET)
                        }
                    }
                }
            }
        }
        stage ("Apply Template") {
            when {
                expression {
                    return env.APP_TEMPLATE_FILE
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Uses the template to create the application
                            openshift.apply(openshift.process(readFile(file: env.APP_TEMPLATE_FILE), "-p", "PARAM_APP_NAME=${env.APP_NAME}"));
                        }
                    }
                }
            }
        }
        stage("Compile Code") {
            when {
                not {
                    expression {
                        return env.COMPILE_COMMAND.equals("none")
                    }
                }  
            }
            steps {
                sh env.COMPILE_COMMAND
            }
        }
        stage("Test Code") {
            when {
                not {
                    expression {
                        return env.TEST_COMMAND.equals("none")
                    }
                } 
            }
            steps {
                sh env.TEST_COMMAND
            }
        }
        stage("Analize Code") {
            when {
                not {
                    expression {
                        return env.CODE_ANALYSIS_COMMAND.equals("none")
                    }
                } 
            }
            steps {
                sh env.CODE_ANALYSIS_COMMAND
            }
        }
        stage("Release Artifacts") {
            when {
                not {
                    expression {
                        return env.RELEASE_COMMAND.equals("none")
                    }
                }        
            }
            steps {
                sh env.RELEASE_COMMAND
            }
        }
        stage("Build Image") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            buildImage(env.APP_NAME, env.ARTIFACTS_DIR)
                        }
                    }
                }
            }
        }
        // If manual tag is set, asks for the tag to use
        stage("Set Tag") {
            when {
                expression {
                    return env.MANUAL_TAG.equals("true")
                }
            }
            steps {
                script {
                    env.TAG = input(id: 'tag',
                                    message: 'Value for the tag',
                                    parameters: [string(defaultValue: '', name: 'Tag')]);
                }
                
            }
        } 
        stage("Tag Image") {
            when {
                not {
                    expression {
                        return env.TAG.equals("latest")
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.tag("${env.APP_NAME}:latest", "${env.IMAGE_NAME}:${env.TAG}");
                        }
                    }
                } 
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            deployApplication(env.APP_NAME, env.TAG)
                        } 
                    }
                }
            }
        }
    }
}

def gitCheckout(repo, branch, secret) {
    
    def gitInfo = [:]

    gitInfo['url'] = repo
    gitInfo['branch'] = branch

    if (env.GIT_SECRET && !secret.equals("none"))
        gitInfo['credentialsId'] = "${openshift.project()}-${secret}"

    git(gitInfo)
    
}

def buildImage(app, artifactsDir) {

    // If artifacts dir is set, binary s2i build is used
    
    if (artifactsDir)
        openshift.selector("bc", app).startBuild("--from-dir=${artifactsDir}", "--wait=true")
    else 
        openshift.selector("bc", app).startBuild("--wait=true")
        
}

def deployApplication(app, tag) {
    openshift.verbose()
    if (!openshift.selector("dc", app).exists()) {
        // The creation starts a deployment
        createApplication(app, tag)                 
    } else {
        updateApplication(app, tag)
    }   

    verifyDeployment(app)
}

def updateApplication(app, tag) {
    openshift.set("triggers", "dc/${app}", "--remove-all")
    openshift.set("triggers", "dc/${app}", "--from-image=${app}:${tag}", "-c ${app}")
}

def createApplication(app, tag) {
    // Creates the application and get the brand new BuildConfig
    def dc = openshift.newApp("${app}:${tag}").narrow("dc");
    // Creates the app Route
    openshift.selector("svc", app).expose();                
}

def verifyDeployment(app) {
    def dc = openshift.selector("dc", app)

    // Waits for the deployment to finish   
    def latestDeploymentVersion = openshift.selector("dc", app).object().status.latestVersion
    def rc = openshift.selector("rc", "${app}-${latestDeploymentVersion}")
    
    rc.untilEach(1){
        def rcMap = it.object()

        return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
    }
}
