pipeline {
    agent {
        label env.JENKINS_AGENT
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    environment {
        APP_TEMPLATE = "openshift/template.yaml"
        TAG = "latest"
        PROJECT = getProject()
        CREDENTIALS = "${env.PROJECT}-${env.GIT_SECRET}"
    }
    stages {
        stage("Set Release Branch") {
            when {
                not {
                    expression {
                        return env.GIT_BRANCH
                    }
                }         
            }
            steps {
                script {
                    env.GIT_BRANCH = input(id: 'branch',
                                           message: 'Select branch',
                                           parameters: [string(name: 'Branch')]);
                }
            }
        }
        stage("Checkout Code") {
            steps {
                gitClone(repository: env.GIT_REPO, branch: env.GIT_BRANCH, credentialsId: env.CREDENTIALS)
            }
        }
        stage ("Apply Template") {
            steps {
                applyTemplate(template: env.APP_TEMPLATE, application: env.APP_NAME, image: env.IMAGE_NAME)
            }
        }
        stage("Compile Code") {
            when {
                not {
                    expression {
                        return env.COMPILE_COMMAND.equals("none")
                    }
                }  
            }
            steps {
                sh env.COMPILE_COMMAND
            }
        }
        stage("Test Code") {
            when {
                not {
                    expression {
                        return env.TEST_COMMAND.equals("none")
                    }
                } 
            }
            steps {
                sh env.TEST_COMMAND
            }
        }
        stage("Analize Code") {
            when {
                not {
                    expression {
                        return env.CODE_ANALYSIS_COMMAND.equals("none")
                    }
                } 
            }
            steps {
                sh env.CODE_ANALYSIS_COMMAND
            }
        }
        stage("Release Artifacts") {
            when {
                not {
                    expression {
                        return env.RELEASE_COMMAND.equals("none")
                    }
                }        
            }
            steps {
                sh env.RELEASE_COMMAND
            }
        }
        stage("Build Image") {
            steps {
                buildImage(project: env.PROJECT, application: env.APP_NAME, image: env.IMAGE_NAME, artifactsDir: env.ARTIFACTS_DIR)
            }
        }
        stage("Tag Image") {
            when {
                expression {
                    return env.TAG_VERSION.equals("true")
                }   
            }
            steps {
                script {
                    env.TAG = utils.getTag(env.TECH)
                    tagImage(project: env.PROJECT, srcImage: env.IMAGE_NAME, dstImage: env.IMAGE_NAME, dstTag: env.TAG)
                }
            }
        }
        stage("Deploy Image") {
            steps {
                deployImage(project: env.PROJECT, application: env.APP_NAME, image: env.IMAGE_NAME, tag: env.TAG)
            }
        }
    }
}