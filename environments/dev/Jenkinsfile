def commons

pipeline {
    agent {
        label env.JENKINS_AGENT
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    // If tag environment variable is not set, uses latest
                    if (!env.TAG)
                        env.TAG = "latest"
                    
                    // Unless set, automatically tags the image with environment variable tag
                    if (!env.MANUAL_TAG)
                        env.MANUAL_TAG = "false"

                    // If image name is not set, image name will be app name
                    if (!env.IMAGE_NAME) 
                        env.IMAGE_NAME = env.APP_NAME;    

                    sh "wget ${env.COMMONS_API_URL}"
                    commons = load("commons.groovy")
                }
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject {
                            commons.gitCheckout(env.GIT_REPO, env.GIT_BRANCH, env.GIT_SECRET)
                        }
                    }
                }
            }
        }
        stage ("Apply Template") {
            when {
                expression {
                    return env.APP_TEMPLATE_FILE
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // Uses the template to create the application
                            openshift.apply(openshift.process(readFile(file: env.APP_TEMPLATE_FILE), "-p", "PARAM_APP_NAME=${env.APP_NAME}"));
                        }
                    }
                }
            }
        }
        stage("Compile Code") {
            when {
                not {
                    expression {
                        return env.COMPILE_COMMAND.equals("none")
                    }
                }  
            }
            steps {
                sh env.COMPILE_COMMAND
            }
        }
        stage("Test Code") {
            when {
                not {
                    expression {
                        return env.TEST_COMMAND.equals("none")
                    }
                } 
            }
            steps {
                sh env.TEST_COMMAND
            }
        }
        stage("Analize Code") {
            when {
                not {
                    expression {
                        return env.CODE_ANALYSIS_COMMAND.equals("none")
                    }
                } 
            }
            steps {
                sh env.CODE_ANALYSIS_COMMAND
            }
        }
        stage("Release Artifacts") {
            when {
                not {
                    expression {
                        return env.RELEASE_COMMAND.equals("none")
                    }
                }        
            }
            steps {
                sh env.RELEASE_COMMAND
            }
        }
        stage("Build Image") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            commons.buildImage(env.APP_NAME, env.ARTIFACTS_DIR)
                        }
                    }
                }
            }
        }
        // If manual tag is set, asks for the tag to use
        stage("Set Tag") {
            when {
                expression {
                    return env.MANUAL_TAG.equals("true")
                }
            }
            steps {
                script {
                    env.TAG = input(id: 'tag',
                                    message: 'Value for the tag',
                                    parameters: [string(defaultValue: '', name: 'Tag')]);
                }
                
            }
        } 
        stage("Tag Image") {
            when {
                not {
                    expression {
                        return env.TAG.equals("latest")
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.tag("${env.APP_NAME}:latest", "${env.IMAGE_NAME}:${env.TAG}");
                        }
                    }
                } 
            }
        }
        stage("Deploy Application") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            commons.deployApplication(env.APP_NAME, env.TAG)
                        } 
                    }
                }
            }
        }
    }
}